pipeline {
    agent any

    tools {
        maven 'maven-3.8.6'
    }

    environment {
        NAME = "spring-app"
        VERSION = "${BUILD_ID}"
        IMAGE_REPO = "kavyasree1864"
        GIT_REPO_NAME = "devops"
        GIT_USER_NAME = "Kav1864"
        
        ARTIFACTORY_URL = "http://34.122.90.227:8081/artifactory"
        ARTIFACTORY_REPO = "my-local-repo"
        ARTIFACTORY_CREDENTIALS = "jfrog-cred"
    }

    stages {
        stage('Checkout Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Kav1864/devops.git'
            }
        }

        stage('Get Git Commit') {
            steps {
                script {
                    env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    echo "Git Commit Hash: ${env.GIT_COMMIT}"
                }
            }
        }

        stage('Build & Test') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Verify JAR in Target') {
            steps {
                sh 'ls -lh target'
            }
        }

        stage('Deploy to Artifactory') {
            steps {
                script {
                    try {
                        def server = Artifactory.newServer url: "${ARTIFACTORY_URL}", credentialsId: "${ARTIFACTORY_CREDENTIALS}"

                        def uploadSpec = """{
                            "files": [
                                {
                                    "pattern": "target/*.jar",
                                    "target": "${ARTIFACTORY_REPO}/",
                                    "flat": "true"
                                }
                            ]
                        }"""

                        server.upload(uploadSpec)
                    } catch (Exception e) {
                        error("Failed to deploy artifacts to Artifactory: ${e.message}")
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    def imageTag = "${IMAGE_REPO}/${NAME}:${VERSION}-${GIT_COMMIT}"
                    echo "Building Docker image: ${imageTag}"

                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        def image = docker.build(imageTag)
                        image.push()
                    }

                    echo "Docker image pushed: ${imageTag}"
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
        }
    }
}  
